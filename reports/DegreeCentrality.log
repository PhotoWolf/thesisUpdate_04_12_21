Traceback (most recent call last):
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 622, in _async_poll_for_reply
    msg = await ensure_async(self.kc.shell_channel.get_msg(timeout=new_timeout))
  File "/opt/conda/lib/python3.7/site-packages/nbclient/util.py", line 85, in ensure_async
    result = await obj
  File "/opt/conda/lib/python3.7/site-packages/jupyter_client/asynchronous/channels.py", line 48, in get_msg
    raise Empty
_queue.Empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/conda/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/conda/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/conda/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/conda/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 841, in async_execute_cell
    exec_reply = await self.task_poll_for_reply
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 646, in _async_poll_for_reply
    await self._async_handle_timeout(timeout, cell)
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 697, in _async_handle_timeout
    "Cell execution timed out", timeout, cell
nbclient.exceptions.CellTimeoutError: A cell timed out while it was being executed, after 30 seconds.
The message was: Cell execution timed out.
Here is a preview of the cell contents:
-------------------
['num_samples = 100', 'p_range = torch.logspace(-2,1,100)', 'density = []', 'eig_ratio = []', '']
...
['', '        density.append(torch_sparse.sum(adj)/(adj.size(0)*adj.size(1)))', '        ', '        vals = torch.sort(torch.norm(torch.eig(adj.to_dense())[0],dim=1))', '        eig_ratio.append(vals[0][-2]/vals[0][-1])']
-------------------

