Traceback (most recent call last):
  File "/opt/conda/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/conda/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/conda/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/conda/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/conda/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
num_graphs = 3000
d = []
for _ in range(num_graphs):
    n = torch.randint(50,100,(5,))
    p = 1/(50*n) + (49/(50*n)) * torch.rand((5,5))
    p = .5 * (p + p.T)
    x,edges = torch.ones((n.sum(),1)),torch_geometric.utils.remove_isolated_nodes(torch_geometric.utils.stochastic_blockmodel_graph(n,p))[0]
    adj = torch_sparse.SparseTensor(row=edges[0],col=edges[1])

    d.append(torch_geometric.data.Data(x=x[:adj.size(0)],edge_index = edges))

for idx,G in enumerate(d,position=0):
    G.edge_weight = torch.ones(G.edge_index[0].shape)
    adj = torch_sparse.SparseTensor(row=G.edge_index[0],col=G.edge_index[1],value=G.edge_weight)
    v = 1/(1.01*torch.norm(torch.eig(adj.to_dense())[0],dim=1).max())
    y = torch.sum(torch.inverse(torch.eye(adj.size(0)) - v*adj.to_dense().T) - torch.eye(adj.size(0)),dim=1)
    G.y = y
    d[idx] = G
    
train,test = d[:2000],d[2000::]
train_loader = torch_geometric.data.DataLoader(train,batch_size=200,shuffle=True)
test_loader = torch_geometric.data.DataLoader(test,batch_size=200,shuffle=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-2-a7b83814a1b6>[0m in [0;36m<module>[0;34m[0m
[1;32m     10[0m     [0md[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mtorch_geometric[0m[0;34m.[0m[0mdata[0m[0;34m.[0m[0mData[0m[0;34m([0m[0mx[0m[0;34m=[0m[0mx[0m[0;34m[[0m[0;34m:[0m[0madj[0m[0;34m.[0m[0msize[0m[0;34m([0m[0;36m0[0m[0;34m)[0m[0;34m][0m[0;34m,[0m[0medge_index[0m [0;34m=[0m [0medges[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     11[0m [0;34m[0m[0m
[0;32m---> 12[0;31m [0;32mfor[0m [0midx[0m[0;34m,[0m[0mG[0m [0;32min[0m [0menumerate[0m[0;34m([0m[0md[0m[0;34m,[0m[0mposition[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     13[0m     [0mG[0m[0;34m.[0m[0medge_weight[0m [0;34m=[0m [0mtorch[0m[0;34m.[0m[0mones[0m[0;34m([0m[0mG[0m[0;34m.[0m[0medge_index[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m.[0m[0mshape[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m     [0madj[0m [0;34m=[0m [0mtorch_sparse[0m[0;34m.[0m[0mSparseTensor[0m[0;34m([0m[0mrow[0m[0;34m=[0m[0mG[0m[0;34m.[0m[0medge_index[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m[0mcol[0m[0;34m=[0m[0mG[0m[0;34m.[0m[0medge_index[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m,[0m[0mvalue[0m[0;34m=[0m[0mG[0m[0;34m.[0m[0medge_weight[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: 'position' is an invalid keyword argument for enumerate()
TypeError: 'position' is an invalid keyword argument for enumerate()

